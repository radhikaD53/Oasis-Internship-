# Importing libraries

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns

# Reading dataset

data=pd.read_csv("C:\\Users\\Radhika\\Downloads\\iris csv\\Iris.csv")

data.head()

data.tail()

# Giving proper heading to columns

data_header = ['Id','SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm','Species']
data.to_csv('Iris.csv', header = data_header, index = False)
new_data = pd.read_csv('Iris.csv')
new_data.head()

# Checking no. of rows and columns

new_data.shape

# Checking datatypes in dataset

new_data.info()

# Describing dataset

new_data.describe()

# Checking null values in dataset

new_data.isnull().sum()

# Data visualization

plt.bar(new_data['Species'],new_data['SepalLengthCm'], width = 0.5) 
plt.title("Sepal LengthCm vs Type")
plt.show()

plt.bar(new_data['Species'],new_data['SepalWidthCm'], width = 0.5) 
plt.title("Sepal WidthCm vs Type")
plt.show()

plt.bar(new_data['Species'],new_data['PetalLengthCm'], width = 0.5) 
plt.title("Petal LengthCm vs Type")
plt.show()

# Pairplot for dataset

sns.pairplot(new_data,hue='Species')

#Splitting the dataset

x = new_data.drop(columns="Species")
y = new_data["Species"]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.4, random_state = 1)

x_train.head()

x_test.head()

y_train.head()

y_test.head()

print("x_train: ", len(x_train))
print("x_test: ", len(x_test))
print("y_train: ", len(y_train))
print("y_test: ", len(y_test))

# Building model using logistic regression

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, roc_auc_score

model = LogisticRegression()
model.fit(x_train, y_train)

predict = model.predict(x_test)
print("Pridicted values on Test Data", predict)

y_test_pred = model.predict(x_test)
y_train_pred = model.predict(x_train)

print("Training Accuracy : ", accuracy_score(y_train, y_train_pred))
print("Test Accuracy : ", accuracy_score(y_test, y_test_pred))

